!!!
%html
  %head
    %title Tempest Watch
    %link{type: 'text/css', rel: 'stylesheet', href: 'css/materialize.min.css',  media:'screen,projection'}
    %link{type: 'text/css', rel: 'stylesheet', href: 'css/tempest.css',  media:'screen,projection'}
    %link{href: 'https://fonts.googleapis.com/icon?family=Material+Icons', rel: 'stylesheet'}
    %meta{name: 'viewport', content: 'width=device-width, initial-scale=1.0'}
    %meta{name: 'description', content: 'Path of Exile tempest tempest tracker. See what tempests are in each map and report tempest sightings'}
  %body
    %header
      .navbar-fixed
        %nav
          .nav-wrapper.container
            %a.brand-logo{:href => "#"} Tempest Watch
            %ul.right.hide-on-small-and-down
              %li
                %a{href: '.'}
                  %i.material-icons refresh
    %main
      .container
        = yield

    %footer.page-footer
      .container
        .row
          .col.l6.s12
            %p.grey-text.text-lighten-4
              This site is fan-made and is not affiliated with Grinding Gear Games in any way.
            %p.grey-text.text-lighten-4
              Developed by Justin Vanderheide
            %p.grey-text.text-lighten-4
              Contribute on
              %a.blue-text.text-darken-3{href: 'https://github.com/jayvan/tempest-watch'} GitHub
          .col.l6.s12
            %h5.white-text Built with
            %ul
              %li
                %a.blue-text.text-darken-3{:href => 'http://materializecss.com/'} Materialize
              %li
                %a.blue-text.text-darken-3{:href => 'http://redis.io/'} Redis
              %li
                %a.blue-text.text-darken-3{:href => 'http://www.sinatrarb.com/'} Sinatra

    %script{type: 'text/javascript', src: 'js/jquery-2.1.4.min.js'}
    %script{type: 'text/javascript', src: 'js/materialize.min.js'}

    :javascript
      $(document).ready(function() {
        // Setup materialize nonsense
        $('select').material_select();
        $('ul.tabs').tabs();

        var reportForm = $('.report') ;

        window.vote = function(map, base, suffix) {
          $.post('api/v0/vote',
            { map: map, base: base, suffix: suffix },
            function(data) {
              $('.'+map+'-report').hide();
              Materialize.toast('Thank you, your tempest sighting has been logged.', 4000)
            });
        };

        window.downvote = function(map, base, suffix) {
          currentMap = $('#vote [name=map]').val()
          if (currentMap.length > 0) {
            $('.'+currentMap+'-report').toggle();
            if (currentMap == map) {
              return;
            }
          }
          $('#vote [name=map]').val(map)
          $('#vote [name=base]').val(base)
          $('#vote [name=suffix]').val(suffix)

          $('#vote').show().detach().appendTo('.'+map+'-report td');

          $('.'+map+'-report').show();

          // Babysit materialize >_>
          $('select').material_select('destroy');
          $('.caret').remove();
          $('select').material_select();

          Materialize.toast('Please select the correct tempest and send the report.', 4000)
        };

        reportForm.submit(function(e) {
          e.preventDefault();

          if ($(this).serializeArray().length != 3) {
            return;
          }
          var map = $(this).find('[name=map]').val()
          var base = $(this).find('[name=base]').val()
          var suffix = $(this).find('[name=suffix]').val()
          console.log(map, base, suffix);
          vote(map, base, suffix)
        });

        var refreshHeader = $('#countdown')
        var minuteSpan = $('#minutes-left');
        var secondSpan = $('#seconds-left');

        // Set up the countdown
        var resetTime = new Date(Date.now() + #{seconds_to_reset * 1000});
        var timerUpdate = setInterval(function() {
          var secondsToReset = Math.floor((resetTime - Date.now()) / 1000);
          if (secondsToReset < 0) {
            // Refresh 0-10 seconds from now to distribute reloads
            // Otherwise every connected browsers hits the server simultaneously
            window.setTimeout(function() {
              window.location.reload();
            }, Math.random() * 10000);

            refreshHeader.text('Refreshing...');
            clearInterval(timerUpdate);
            return;
          }
          var minutesLeft = Math.floor(secondsToReset / 60);
          var secondsLeft = secondsToReset - minutesLeft * 60;
          var secondsLeftPadded = ("0" + secondsLeft).slice(-2);
          minuteSpan.text(minutesLeft);
          secondSpan.text(secondsLeftPadded);
        });
      });
